
public class nQueens {
		private int n; 
		private int [][]board; 

	public nQueens (int size) {
		board = new int [size][size];
		n=size; 
		
		
	}
	
	public boolean placeNQueens () {
		
			if (n<=0)
				throw new Exception (); 
			
			if (placeNQueens(0,board)== false) {
				System.out.printf("You cannot place ", n," Queens on a chessboard of ", n," x ", n);
				return false; 
			}
			return true; 
	}
	boolean placeNQueens(int col, int board [][]) {
			if (col ==n) {
				printToConsole(board); 
				return true; 
			}
			
			
		 	for (int row = 0; row < n; row++){
				if (isAttacked(row,col,board)==false) {
					board [row][col]=1; 
					 
					if (placeNQueens(col+1, board)==true) {
						return true; 
					}
					else {
						row--; 
						board[row][col]=0;
					}
					
				}
			}
			return false; 
			
		}

	boolean isAttacked (int row, int col) {
		//returns true if attacked, false if safe
		//geeks for geeks as guide
		
		int i, j; 
		
		//checks left side of row
		for (i=0; i<col; i++) {
			if (board[row][i]==1)
				return true; 
		}
		
		//checks left upper diagonal
		for ( i = row, j = col; i >= 0 && j >= 0; i--, j--) {
			if (board[i][j]==1)
				return true; 
		}
		
		//checks left lower diagonal
		for ( i = row, j = col; j >= 0 && i <n; i++, j--) {
			if (board[row][i]==1)
				return true; 
		}
		return false;		
	}
	
	void printToConsole (int[][]board) {
	// prints board
		for (int i = 0; i< n; i++) {
			for (int j = 0; j < n; j++) {
				if (board[i][j] ==1)
					System.out.print(" Q "); 
				if (board[i][j]==0)
					System.out.print(" _ ");
				}
			}
		System.out.println();
		}
	}
	
	
